{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constant.js';\nexport const setSearchField = text => ({\n  type: 'CHANGE_SEARCH_FIELD',\n  payload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/haoyuyang/webdev/robofriends/src/action.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACCA,mBADD,EAECC,sBAFD,EAGCC,sBAHD,EAICC,qBAJD,QAKO,eALP;AAQA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACxCC,EAAAA,IAAI,EAAE,qBADkC;AAExCC,EAAAA,OAAO,EAAEF;AAF+B,CAAX,CAAvB;AAKP,OAAO,MAAMG,aAAa,GAAIC,QAAD,IAAc;AAC1CA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAACL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACEC,IADF,CACOC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADlB,EAEEF,IAFF,CAEOG,IAAI,IAAIL,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEO;AAAzC,GAAD,CAFvB,EAGEC,KAHF,CAGQC,KAAK,IAAIP,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,qBAAR;AAA+BI,IAAAA,OAAO,EAACS;AAAvC,GAAD,CAHzB;AAIA,CANM","sourcesContent":["import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constant.js';\n\n\nexport const setSearchField = (text) => ({\n\ttype: 'CHANGE_SEARCH_FIELD',\n\tpayload: text\n})\n\nexport const requestRobots = (dispatch) => {\n\tdispatch({ type:REQUEST_ROBOTS_PENDING })\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload:error}))\n}"]},"metadata":{},"sourceType":"module"}